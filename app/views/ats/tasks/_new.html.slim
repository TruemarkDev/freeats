/# locals: (modal_id:,
/ form_options:,
/ modal_size:,
/ assignee_options:,
/ watchers_options:,
/ default_assignee:,
/ default_watchers:,
/ current_member:,
/ taskable:,
/ taskable_name:,
/ hidden_fields:
/)

- taskable ||= nil

- content_for :title
  - if taskable
    | New task for #{taskable_name}
  - else
    | New task

- content_for :body
  .container [data-controller="turbo-modal-tasks"
      data-turbo-modal-tasks-current-member-value=current_member.id]
    / First row
    .hstack.gap-3
      / Title edit
      .w-4.h-4
        input.form-check-input.mt-0 type="checkbox" disabled=true
        label.form-check-label
      = render TextInputComponent.new("task[name]",
                                      placeholder: t("tasks.task_name"), required: true,
                                      data: { async_modals_target: "focusAfterShown" })

    / Second row
    .d-flex.flex-wrap.mt-3.column-gap-4
      / Assignee
      = render LabeledComponent.new(class: "flex-fill col-12 col-lg-6",
                                    left_layout_class: "col-lg-3", right_layout_class: "col-lg-9") do |c|
        - c.with_label(t("core.assignee"), for_field: "task[assignee_id]", color_class: "text-gray-600")
        = select_tag "task[assignee_id]", options_for_select(assignee_options, default_assignee),
                      class: "form-control selectpicker flex-fill",
                      data: { live_search: true,
                              turbo_modal_tasks_target: "selectAssignee selectpicker" }
      / Watchers
      = render LabeledComponent.new(class: "flex-fill col-12 col-lg-6",
                                    left_layout_class: "col-lg-3", right_layout_class: "col-lg-9") do |c|
        - c.with_label(t("core.watchers"), for_field: "task[watcher_ids]", color_class: "text-gray-600")
        = select_tag "task[watcher_ids]",
                      options_for_select(watchers_options,
                                        { selected: [*default_watchers, default_assignee, current_member.id],
                                        disabled: default_assignee }),
                      class: "form-control selectpicker",
                      multiple: true,
                      data: { live_search: true,
                              turbo_modal_tasks_target: "selectPickerWatchers selectpicker" }
    / Third row
    .d-flex.flex-wrap.mt-lg-3.column-gap-4
      / Due date
      = render LabeledComponent.new(class: "flex-fill col-12 col-lg-6",
                                    left_layout_class: "col-lg-3", right_layout_class: "col-lg-9") do |c|
        - c.with_label(t("core.due_date"), for_field: "task[due_date_alt]", color_class: "text-gray-600")
        div data-controller="humanized-datepicker"
          = render TextInputComponent.new("task[due_date]", value: Time.zone.today.next_weekday,
                                          data: { humanized_datepicker_target: "datepicker" },
                                          class: "hidden", required: true)
          = render TextInputComponent.new("task[due_date_alt]", class: "bg-white", readonly: true,
                                          data: { action: "click->humanized-datepicker#showDatepicker",
                                                  humanized_datepicker_target: "datepickerAlt" })
      / Repeat
      = render LabeledComponent.new(class: "flex-fill col-12 col-lg-6",
                                    left_layout_class: "col-lg-3", right_layout_class: "col-lg-9") do |c|
        - c.with_label(t("tasks.repeat"), for_field: "task[repeat_interval]", color_class: "text-gray-600")
        = select_tag "task[repeat_interval]",
                      options_for_select(Task.repeat_intervals.transform_keys(&:humanize),
                                        { selected: :never }),
                      class: "form-control selectpicker",
                      data: { turbo_modal_tasks_target: "selectpicker" }
    / Fourth row
    .d-flex.flex-wrap.mt-lg-3.column-gap-4
      = render LabeledComponent.new(class: "vstack gap-2") do |c|
        - c.with_label(t("tasks.description"), style: "height: 32px;",
                       for_field: "task[description]", color_class: "text-gray-600")
        = text_area_tag "task[description]", "", rows: 4, class: "form-control overflow-auto"

    = hidden_field_tag "task[default_watchers]", default_watchers,
                       data: { "turbo-modal-tasks-target" => "defaultWatchers" }

- content_for :footer
  = render ButtonComponent.new(variant: :cancel, type: :button, data: { bs_dismiss: "modal" })
    = t("core.cancel_button")
  = render ButtonComponent.new
    = t("core.create_button")
